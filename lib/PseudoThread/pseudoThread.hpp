
#include <functional>

/**
 * @brief Get the Identifier value to identify the same run of executeIfTimeLeft method.
 *
 * @return unsigned long Unique identifier.
 */
unsigned long getIdentifier();


/*
 * Alias for function with the
 *      void foo(void)
 * signature.
*/
typedef std::function<void(void)> voidFuntion;

/**
 * @brief Executes the timeLeftProcedure function if periosMs of milliseconds has left since the
 * last run. Last run is identified by the pseudoThrId parameter, that is supposed to be unique.
 * If the required time has no left yet, the otherwiseProcedure function is executed if given.
 *
 * @param pseudoThrId Unique ID to identify the same call.
 * Is supposed to be generated by the getIdentifier() method.
 * @param periodMs Time in milliseconds after that the function timeLeftProcedure can be run again.
 * @param timeLeftProcedure The function that should be called if the time passed.
 * @param otherwiseProcedure The function that should be called if the time doesnt pass yet.
 * If nullptr (by default) none function will be execute in this case.
 * @param getTime The function, that deliver current time.
 * 
 * @return true Function timeLeftProcedure was executed.
 * @return false Function timeLeftProcedure wasn't executed.
 */
bool executeIfTimeLeft(unsigned int pseudoThrId, unsigned long periodMs, voidFuntion timeLeftProcedure, 
                       voidFuntion otherwiseProcedure, std::function<unsigned long()> getTime);
